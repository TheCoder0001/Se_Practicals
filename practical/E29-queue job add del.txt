
PROBLEM STATEMENT: Queues are frequently used in computer programming, and a typical example is the creation of a job queue by an operating system. If the operating system does not use priorities, then the jobs are processed in the order they enter the system. Write C++ program for simulating job queue. Write functions to add job and delete job from queue.


#include <iostream>
#define MAX 10
using namespace std;
struct queue {
    int data[MAX];
    int front, rear;
};

class Queue {
    struct queue q;
public:
    Queue() { q.front = q.rear = -1; }
    int isempty();
    int isfull();
    void enqueue(int);
    int delqueue();
    void display();
};

int Queue::isempty() {
    return (q.front == q.rear) ? 1 : 0;
}

int Queue::isfull() {
    return (q.rear == MAX - 1) ? 1 : 0;
}

void Queue::enqueue(int x) {
    if (isfull()) {
        cout << "Queue is overflow!!!\n\n";
        return;
    }
    if (isempty()) {
        q.front = 0; // Initialize front if it's the first job
    }
    q.data[++q.rear] = x;
}

int Queue::delqueue() {
    if (isempty()) {
        cout << "Queue is underflow!!!\n\n";
        return -1; // Indicate that the queue is empty
    }
    return q.data[q.front++];
}

void Queue::display() {
    int i;
    if (isempty()) {
        cout << "Queue is empty!!!\n\n";
        return;
    }
    cout << "\n";
    for (i = q.front; i <= q.rear; i++)
        cout << q.data[i] << " ";
}

int main() {
    Queue obj;
    int ch, x;
    do {
        cout << "\n1. Insert Job\n2. Delete Job\n3. Display\n4. Exit\nEnter your choice: ";
        cin >> ch;
        switch (ch) {
        case 1:
            cout << "\nEnter data: ";
            cin >> x;
            obj.enqueue(x);
            break;
        case 2:
            cout << "\nDeleted Element = " << obj.delqueue() << endl;
            cout << "\nRemaining Jobs:\n";
            obj.display();
            break;
        case 3:
            cout << "\nQueue contains:\n";
            obj.display();
            break;
        case 4:
            cout << "\nExiting Program.....\n";
            break;
        default:
            cout << "\nInvalid choice! Please try again.\n";
        }
    } while (ch != 4);
    return 0;
}



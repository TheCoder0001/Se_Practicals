
PROBLEM STATEMENT: Second year Computer Engineering class, set A of students like Vanilla ice-cream and set B of students like Butterscotch ice-cream. Write C++ program to store two sets using Linked List. Compute and display-i. Set of students who like both vanilla and butterscotch
ii. Set of students who like either vanilla or butterscotch or not both
iii. Number of students who like neither vanilla nor butterscotch

#include <iostream>
using namespace std;

struct SLLNode {
    char data;
    SLLNode* next;
};
SLLNode* createSLL(int count);
void displaySLL(SLLNode* head);
void computeSets(SLLNode* headU, SLLNode* headA, SLLNode* headB);
int main() {
    cout << "\nEnter 10 Students of SE Comp: ";
    SLLNode* headU = createSLL(10);
    cout << "\nEnter 5 Students who like Vanilla Ice Cream: ";
    SLLNode* headA = createSLL(5);
    cout << "\nEnter 5 Students who like Butterscotch Ice Cream: ";
    SLLNode* headB = createSLL(5);
    cout << "\nInput Sets:------------------------";
    cout << "\nSet 'U': ";
    displaySLL(headU);
    cout << "\nSet 'A': ";
    displaySLL(headA);
    cout << "\nSet 'B': ";
    displaySLL(headB);
    cout << "\n\nOutput Sets:------------------------";
    computeSets(headU, headA, headB);

    return 0;
}
SLLNode* createSLL(int count) {
    SLLNode* head = nullptr;
    SLLNode* tail = nullptr;
    for (int i = 0; i < count; i++) {
        SLLNode* newNode = new SLLNode();
        cout << "\nEnter Student Initial: ";
        cin >> newNode->data;
        newNode->next = nullptr;
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }
    return head;
}
void displaySLL(SLLNode* head) {
    for (SLLNode* p = head; p != nullptr; p = p->next) {
        cout << " " << p->data;
    }
}
void computeSets(SLLNode* headU, SLLNode* headA, SLLNode* headB) {
    char results[20];
    int index;
    // A U B
    index = 0;
    SLLNode* p = headA;
    while (p) { results[index++] = p->data; p = p->next; }
    p = headB;
    while (p) { results[index++] = p->data; p = p->next; }
    cout << "\nSet A U B: ";
    for (int i = 0; i < index; i++) cout << " " << results[i];
    // A ? B
    index = 0;
    p = headA;
    while (p) {
        SLLNode* q = headB;
        while (q) {
            if (p->data == q->data) results[index++] = p->data;
            q = q->next;
        }
        p = p->next;
    }
    cout << "\nSet A ? B: ";
    for (int i = 0; i < index; i++) cout << " " << results[i];
    // A - B
    index = 0;
    p = headA;
    while (p) {
        SLLNode* q = headB;
        bool found = false;
        while (q) {
            if (p->data == q->data) { found = true; break; }
            q = q->next;
        }
        if (!found) results[index++] = p->data;
        p = p->next;
    }
    cout << "\nSet A - B: ";
    for (int i = 0; i < index; i++) cout << " " << results[i];
    // B - A
    index = 0;
    p = headB;
    while (p) {
        SLLNode* q = headA;
        bool found = false;
        while (q) {
            if (p->data == q->data) { found = true; break; }
            q = q->next;
        }
        if (!found) results[index++] = p->data;
        p = p->next;
    }
    cout << "\nSet B - A: ";
    for (int i = 0; i < index; i++) cout << " " << results[i];
    // U - (A U B)
    index = 0;
    p = headU;
    while (p) {
        bool found = false;
        for (int j = 0; j < index; j++) {
            if (results[j] == p->data) { found = true; break; }
        }
        if (!found) results[index++] = p->data;
        p = p->next;
    }
    cout << "\nSet U - (A U B): ";
    for (int i = 0; i < index; i++) cout << " " << results[i];
}

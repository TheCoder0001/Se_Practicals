PROGRAM STATEMENT : B11 : a) Write a pythonprogram to store roll numbers of student in array who attended training program in random order. Write function for searching whether particular student attended training program or not, using Linear search and Sentinel search. 
b) Write a python program to store roll numbers of student array who attended training program in sorted order. Write function for searching whether particular student attended training program or not, using Binary search and Fibonacci search

//CODE :

programRoll=[]
attendees=int(input("Enter the number of students attending the program:"))

def attendInput():
	for i in range(attendees):
		roll=int(input(f"Enter roll number for student {i+1}:"))
		programRoll.append(roll)
	print(f"Roll numbers of {attendees} students that attended the program are: {programRoll}")

# Linear search
def linearSearch(roll_list, roll_search):
	for i in roll_list:
		if i==roll_search:
		    return 1

# Sentinel search
def sentinelSearch(roll_list, roll_search, n):
    end=roll_list[n-1]
    roll_list[n-1]=roll_search
    i=0
    while (roll_list[i] != roll_search):
        i+=1
    roll_list[n-1]=end
    if ((i<n-1) or (roll_search==roll_list[n-1])):
        return 1
    else:
        return -1

#binary search
def binarySearch(arr, target):
    arr.sort()
   
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        mid_element = arr[mid]

        if mid_element == target:
            return mid  
        elif mid_element < target:
            low = mid + 1  
        else:
            high = mid - 1  
    return -1 

# Fibonacci search
def fibonacciSearch(students_attend, search_element, n):
    students_attend.sort()
    fibMMm2 = 0
    fibMMm1 = 1
    fibM = fibMMm2 + fibMMm1
    while (fibM<n):
        fibMMm2=fibMMm1
        fibMMm1=fibM
        fibM=fibMMm2+fibMMm1
    offset=-1;
    while (fibM>1):
        i=min(offset+fibMMm2, n-1)
        if (students_attend[i]<search_element):
            fibM=fibMMm1
            fibMMm1=fibMMm2
            fibMMm2=fibM-fibMMm1
            offset=i
        elif (students_attend[i]>search_element):
            fibM=fibMMm2
            fibMMm1=fibMMm1-fibMMm2
            fibMMm2=fibM-fibMMm1
        else:
            return i
    if(fibMMm1 and students_attend[offset+1]==search_element):
        return offset+1;
    else:
        return -1

def main():

	
	attendInput()
	searchAttendee=int(input("\nEnter the roll number you want to search:"))
	
	
	while True:
		print("\n----- CHOOSE SEARCH TYPE -----")
		print("1 : Linear search")
		print("2 : Sentinel search")
		print("3 : Binary search")
		print("4 : Fibonacci search")
		print("5 : Exit")
		optn=int(input("\nChoose an option (1-5):"))
		
		if (optn==1):
			result=linearSearch(programRoll, searchAttendee)
			if (result==1):
			    print(f"\nRoll number {searchAttendee} attended the program.")
			else:
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.")
		elif (optn==2):
			result=sentinelSearch(programRoll, searchAttendee, attendees)
			if (result==1):
			    print(f"\nRoll number {searchAttendee} attended the program.")
			else:
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.")
		elif (optn==3):
			result=binarySearch(programRoll, searchAttendee)
			if (result==-1):
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.")
			else:
			    print(f"\nRoll number {searchAttendee} attended the program.")
		elif (optn==4):
			result=fibonacciSearch(programRoll, searchAttendee, attendees)
			if (result==-1):
			    print(f"\nRoll number {searchAttendee} has either not been added to the list or was absent.")
			else:
			    print(f"\nRoll number {searchAttendee} attended the program.")
		elif (optn==5):
			print("\n END OF CODE\n")
			quit()
		else:
			print("\nInvalid choice, Please enter a valid choice\n")
			


main()

